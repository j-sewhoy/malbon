function transformShopifyOrderData(options) {
    // Set parameters
    const storeUrlPrefix = options.postResponseMapData[0].shopifyStoreUrl || 'malbon.myshopify.com';
    const storeUrl = 'https://' + storeUrlPrefix + '/admin/orders/';
    
    // Parameterize special regional tax conditions:
    const specialRegionalTaxRules = [
        { title: "Colorado Retail Delivery Fee", province: "CO" },
        { title: "Road Improvement and Food Delivery Fee", province: "MN" }
        // Add more rules here as needed
    ];

    // Parameterize SKU modifications:
    // Add as many patterns and replacements as needed.
    const skuMappings = [
        { match: /^extend-shipping-protection-/i, replacement: "Extend-Shipping-Protection" },
        { match: /^mb-g-card-/i, replacement: "MB-G-CARD" }
        // Add more mappings if needed
    ];

    // Extract order data
    var order = options.postResponseMapData[0].orderDetailsLookup;
    var shippingAddressProvince = '';
    if (order.shippingAddress && order.shippingAddress.provinceCode) {
        shippingAddressProvince = order.shippingAddress.provinceCode || '';
    }
    var orderUrl = storeUrl.concat(order.legacyResourceId);
    var orderSourceLocation = (order.retailLocation && order.retailLocation.id) ? order.retailLocation.id.replace('gid://shopify/Location/', '') : storeUrlPrefix;

    // Initialize totals
    var totalLineAmount = 0;
    var totalDiscounts = 0;
    var totalTaxes = 0;
    var totalShippingAmount = 0;
    var totalShippingDiscounts = 0;
    var totalShippingTaxes = 0;

    // Calculate total order-level discount
    var totalOrderDiscount = 0;
    if (order.discountApplications && order.discountApplications.edges.length > 0) {
        order.discountApplications.edges.forEach(function(discountEdge) {
            var discount = discountEdge.node;
            if (discount.valueType === 'FIXED_AMOUNT') {
                totalOrderDiscount += parseFloat(discount.value) || 0;
            } else if (discount.valueType === 'PERCENTAGE') {
                totalOrderDiscount += ((parseFloat(discount.value) || 0) / 100) * (parseFloat(order.subtotalPriceSet.shopMoney.amount) || 0);
            }
        });
    }

    // Map fulfillment locations to line items
    function mapFulfillmentLocationsToLineItems(order) {
        const lineItemsMap = {};
        order.lineItems.edges.forEach((edge) => {
            const lineItem = edge.node;
            lineItemsMap[lineItem.id] = {
                lineItem: lineItem,
                fulfillmentLocations: []
            };
        });

        // Process fulfillments
        if (order.fulfillments && order.fulfillments.edges.length > 0) {
            order.fulfillments.edges.forEach((fulfillmentEdge) => {
                const fulfillment = fulfillmentEdge.node;
                const location = fulfillment.location;
                if (!location) return;
                if (fulfillment.lineItems && fulfillment.lineItems.edges.length > 0) {
                    fulfillment.lineItems.edges.forEach((fLineItemEdge) => {
                        const fLineItem = fLineItemEdge.node;
                        const lineItemId = fLineItem.lineItem.id;
                        const quantityFulfilled = parseFloat(fLineItem.quantity) || 0;
                        if (lineItemsMap[lineItemId]) {
                            lineItemsMap[lineItemId].fulfillmentLocations.push({
                                locationId: location.id,
                                locationName: location.name,
                                quantity: quantityFulfilled
                            });
                        }
                    });
                }
            });
        }

        // Process fulfillment orders
        if (order.fulfillmentOrders && order.fulfillmentOrders.edges.length > 0) {
            order.fulfillmentOrders.edges.forEach((fulfillmentOrderEdge) => {
                const fulfillmentOrder = fulfillmentOrderEdge.node;
                const assignedLocation = fulfillmentOrder.assignedLocation.location;
                if (!assignedLocation) return;
                if (fulfillmentOrder.lineItems && fulfillmentOrder.lineItems.edges.length > 0) {
                    fulfillmentOrder.lineItems.edges.forEach((fOrderLineItemEdge) => {
                        const fOrderLineItem = fOrderLineItemEdge.node;
                        const lineItemId = fOrderLineItem.lineItem.id;
                        const quantity = parseFloat(fOrderLineItem.lineItem.quantity) || 0;
                        if (lineItemsMap[lineItemId]) {
                            lineItemsMap[lineItemId].fulfillmentLocations.push({
                                locationId: assignedLocation.id,
                                locationName: assignedLocation.name,
                                quantity: quantity
                            });
                        }
                    });
                }
            });
        }

        return lineItemsMap;
    }

    var lineItemsMap = mapFulfillmentLocationsToLineItems(order);
    var newLineItems = [];

    // Process each line item
    for (var lineItemId in lineItemsMap) {
        var lineItemData = lineItemsMap[lineItemId];
        var lineItem = lineItemData.lineItem;
        var fulfillmentLocations = lineItemData.fulfillmentLocations;

        var unitPrice = parseFloat(lineItem.originalUnitPriceSet.shopMoney.amount) || 0;
        var lineItemQuantity = parseFloat(lineItem.quantity) || 0;

        // Line-level discounts
        var lineDiscount = 0;
        if (lineItem.discountAllocations && lineItem.discountAllocations.length > 0) {
            lineItem.discountAllocations.forEach(function(discountAllocation) {
                if (discountAllocation.allocatedAmount && discountAllocation.allocatedAmount.amount) {
                    lineDiscount += parseFloat(discountAllocation.allocatedAmount.amount) || 0;
                }
            });
        }

        // Proportional order-level discount
        var subtotalPrice = parseFloat(order.subtotalPriceSet.shopMoney.amount) || 0;
        var lineSubtotal = unitPrice * lineItemQuantity;
        var proportionalDiscount = 0;
        if (subtotalPrice > 0) {
            proportionalDiscount = (lineSubtotal / subtotalPrice) * totalOrderDiscount;
            lineDiscount += proportionalDiscount;
        }

        // Taxes and duties
        var lineTaxesTotal = 0;
        var lineTaxRate = 0;
        if (lineItem.taxLines && lineItem.taxLines.length > 0) {
            lineItem.taxLines.forEach(function(taxLine) {
                lineTaxesTotal += parseFloat(taxLine.priceSet.shopMoney.amount) || 0;
                lineTaxRate += parseFloat(taxLine.rate) || 0;
            });
        }

        var lineDutiesTotal = 0;
        if (lineItem.duties && lineItem.duties.length > 0) {
            lineItem.duties.forEach(function(duty) {
                lineDutiesTotal += parseFloat(duty.price.shopMoney.amount) || 0;
            });
        }

        var totalLineTaxes = lineTaxesTotal + lineDutiesTotal;

        // SKU modifications using parameterized rules
        if (lineItem.sku && typeof lineItem.sku === 'string') {
            var originalSku = lineItem.sku;
            var skuLower = originalSku.toLowerCase();
            // Check each mapping rule
            for (const mapping of skuMappings) {
                if (mapping.match instanceof RegExp) {
                    // If 'match' is a RegExp
                    if (mapping.match.test(skuLower)) {
                        lineItem.sku = mapping.replacement;
                        break; // Stop after first match
                    }
                } else {
                    // If 'match' is a string, use startsWith or another check
                    if (skuLower.startsWith(mapping.match.toLowerCase())) {
                        lineItem.sku = mapping.replacement;
                        break; // Stop after first match
                    }
                }
            }
        }

        // Fulfillment location based line items
        if (fulfillmentLocations.length > 0) {
            fulfillmentLocations.forEach(function(fulfillmentLocation) {
                var quantity = parseFloat(fulfillmentLocation.quantity) || 0;
                var locationId = fulfillmentLocation.locationId;
                var locationName = fulfillmentLocation.locationName;
                var thisLineSubtotal = unitPrice * quantity;
                var quantityRatio = (lineItemQuantity > 0) ? quantity / lineItemQuantity : 0;

                var lineDiscountProportional = lineDiscount * quantityRatio;
                var lineTaxesProportional = totalLineTaxes * quantityRatio;
                var lineDutiesProportional = lineDutiesTotal * quantityRatio;

                totalLineAmount += thisLineSubtotal;
                totalDiscounts += lineDiscountProportional;
                totalTaxes += lineTaxesProportional;

                var taxBaseAmount = thisLineSubtotal - lineDiscountProportional;
                var taxRate = (taxBaseAmount > 0) ? (lineTaxesProportional / taxBaseAmount) * 100 : 0;

                newLineItems.push({
                    type: 'inventory_item',
                    sku: lineItem.sku,
                    description: lineItem.title,
                    line_id: lineItem.id.replace('gid://shopify/LineItem/', ''),
                    quantity: quantity,
                    rate: unitPrice.toFixed(3),
                    amount: thisLineSubtotal.toFixed(3),
                    locationId: locationId.replace('gid://shopify/Location/', ''),
                    locationName: locationName,
                    taxes: lineTaxesProportional.toFixed(3),
                    duties: lineDutiesProportional.toFixed(3),
                    taxRate: taxRate.toFixed(3)
                });

                if (lineDiscountProportional > 0) {
                    newLineItems.push({
                        type: 'discount_item',
                        sku: 'Shopify Item Discount',
                        description: 'Discount for ' + lineItem.title,
                        rate: -lineDiscountProportional.toFixed(3),
                        amount: -lineDiscountProportional.toFixed(3),
                        quantity: 1,
                        locationId: locationId.replace('gid://shopify/Location/', ''),
                        locationName: locationName,
                        taxRate: taxRate.toFixed(3)
                    });
                }
            });
        } else {
            var quantity = lineItemQuantity;
            var thisLineSubtotal = unitPrice * quantity;

            totalLineAmount += thisLineSubtotal;
            totalDiscounts += lineDiscount;
            totalTaxes += totalLineTaxes;

            var taxBaseAmount = thisLineSubtotal - lineDiscount;
            var taxRate = (taxBaseAmount > 0) ? (totalLineTaxes / taxBaseAmount) * 100 : 0;

            newLineItems.push({
                type: 'inventory_item',
                sku: lineItem.sku,
                description: lineItem.title,
                quantity: quantity,
                rate: unitPrice.toFixed(3),
                amount: thisLineSubtotal.toFixed(3),
                locationId: orderSourceLocation,
                locationName: '',
                taxes: totalLineTaxes.toFixed(3),
                duties: lineDutiesTotal.toFixed(3),
                taxRate: taxRate.toFixed(3)
            });

            if (lineDiscount > 0) {
                newLineItems.push({
                    type: 'discount_item',
                    sku: 'Shopify Item Discount',
                    description: 'Discount for ' + lineItem.title,
                    rate: -lineDiscount.toFixed(3),
                    amount: -lineDiscount.toFixed(3),
                    quantity: 1,
                    locationId: orderSourceLocation,
                    locationName: '',
                    taxRate: taxRate.toFixed(3)
                });
            }
        }
    }

    // Handle shipping charges, discounts, and taxes
    if (order.shippingLines && order.shippingLines.edges.length > 0) {
        order.shippingLines.edges.forEach(function(shippingLineEdge) {
            var shippingLine = shippingLineEdge.node;
            var shippingAmount = parseFloat(shippingLine.originalPriceSet.shopMoney.amount);

            var shippingTaxes = 0;
            var shippingTaxRate = 0;
            if (shippingLine.taxLines && shippingLine.taxLines.length > 0) {
                shippingLine.taxLines.forEach(function(taxLine) {
                    // Check if the tax line matches the special regional tax rules
                    const matchedRule = specialRegionalTaxRules.find(rule =>
                        rule.title === taxLine.title && shippingAddressProvince === rule.province
                    );
                    if (!matchedRule) {
                        // If not matched, add to shipping tax. If matched, ignore it now. It'll be added in the total tax section
                        shippingTaxes += parseFloat(taxLine.priceSet.shopMoney.amount);
                        shippingTaxRate += parseFloat(taxLine.rate);  
                    } 
                });
            }

            if (shippingAmount > 0) {
                totalShippingAmount += shippingAmount;
                totalShippingTaxes += shippingTaxes;
                newLineItems.push({
                    type: 'shipping_item',
                    sku: 'Shopify Shipping',
                    description: shippingLine.title,
                    rate: shippingAmount.toFixed(3),
                    amount: shippingAmount.toFixed(3),
                    quantity: 1,
                    taxes: shippingTaxes.toFixed(3),
                    taxRate: (shippingTaxes && shippingAmount && shippingAmount > 0) ? ((shippingTaxes / shippingAmount) * 100).toFixed(3) : "0.000"
                });
            } else {
                // If shipping amount is 0 but we have shippingTaxes, treat it as "Other Shipping Taxes"
                if (shippingTaxes > 0) {
                    newLineItems.push({
                        type: 'shipping_item',
                        sku: 'Shopify Other Shipping Taxes',
                        description: 'Taxes on Shipping',
                        rate: shippingTaxes.toFixed(3),
                        amount: shippingTaxes.toFixed(3),
                        quantity: 1,
                        taxes: shippingTaxes.toFixed(3),
                        taxRate: "0.000"
                    });

                    totalShippingTaxes += shippingTaxes;
                }
            }

            // Handle shipping discounts
            var shippingDiscount = 0;
            if (shippingLine.discountAllocations && shippingLine.discountAllocations.length > 0) {
                shippingLine.discountAllocations.forEach(function(discountAllocation) {
                    if (discountAllocation.allocatedAmount && discountAllocation.allocatedAmount.amount) {
                        shippingDiscount += parseFloat(discountAllocation.allocatedAmount.amount);
                    }
                });
            }
            if (shippingDiscount > 0) {
                newLineItems.push({
                    type: 'discount_item',
                    sku: 'Shopify Shipping Discount',
                    description: 'Shipping Discount',
                    amount: -shippingDiscount.toFixed(3),
                    rate: -shippingDiscount.toFixed(3),
                    quantity: 1
                });
                totalShippingDiscounts += shippingDiscount;
            }
        });
    }

    // Update totals
    totalDiscounts += totalShippingDiscounts;
    totalTaxes += totalShippingTaxes;
    totalLineAmount += totalShippingAmount;

    // Handle special regional taxes from order.taxLines
    if (order.taxLines && order.taxLines.length > 0) {
        order.taxLines.forEach(function(taxLine) {
            const matchedRule = specialRegionalTaxRules.find(rule => 
                rule.title === taxLine.title && shippingAddressProvince === rule.province
            );
            if (matchedRule) {
                newLineItems.push({
                    type: 'fee_item',
                    sku: 'Shopify Special Regional Tax',
                    description: taxLine.title,
                    amount: parseFloat(taxLine.priceSet.shopMoney.amount).toFixed(3),
                    rate: parseFloat(taxLine.priceSet.shopMoney.amount).toFixed(3),
                    quantity: 1
                });
                totalTaxes += parseFloat(taxLine.priceSet.shopMoney.amount);
            }
        });
    }

    // Global-e duties subsidy and additional fees
    if (order.customAttributes && order.customAttributes.length > 0) {
        order.customAttributes.forEach(function(attr) {
            if (attr.key === 'CalculatedDutiesSubsidy' && parseFloat(attr.value) !== 0) {
                newLineItems.push({
                    type: 'fee_item',
                    sku: 'GlobalE Duties Subsidy',
                    description: 'GlobalE Duties Subsidy',
                    amount: -1 * parseFloat(attr.value).toFixed(3),
                    rate: -1 * parseFloat(attr.value).toFixed(3),
                    quantity: 1
                });
                newLineItems.push({
                    type: 'fee_item',
                    sku: 'GlobalE Duties Subsidy Clearing',
                    description: 'GlobalE Duties Subsidy Clearing',
                    amount: parseFloat(attr.value).toFixed(3),
                    rate: parseFloat(attr.value).toFixed(3),
                    quantity: 1
                });
            }
            if (attr.key === 'Global-e Additional Fees' && parseFloat(attr.value) !== 0) {
                newLineItems.push({
                    type: 'fee_item',
                    sku: 'GlobalE Additional Fees',
                    description: 'GlobalE Additional Fees',
                    amount: parseFloat(attr.value).toFixed(3),
                    rate: parseFloat(attr.value).toFixed(3),
                    quantity: 1
                });
                totalTaxes += parseFloat(attr.value);
            }
        });
    }

    // Additional fees (GlobalE)
    if (order.originalTotalAdditionalFeesSet && parseFloat(order.originalTotalAdditionalFeesSet.shopMoney.amount) !== 0) {
        newLineItems.push({
            type: 'fee_item',
            sku: 'GlobalE Additional Fees',
            description: 'GlobalE Additional Fees',
            amount: parseFloat(order.originalTotalAdditionalFeesSet.shopMoney.amount).toFixed(3),
            rate: parseFloat(order.originalTotalAdditionalFeesSet.shopMoney.amount).toFixed(3),
            quantity: 1
        });
        totalTaxes += parseFloat(order.originalTotalAdditionalFeesSet.shopMoney.amount);
    }

    // Order Type
    order.order_type = order.sourceName === 'pos' ? 'POS' : 'Online';

    // Fulfillment Type
    if (order.displayFulfillmentStatus === 'FULFILLED' && order.locationId) {
        order.fulfillment_type = 'Fulfilled In Store';
    } else if (order.tags && order.tags.includes('Endless Aisle')) {
        order.fulfillment_type = 'Endless Aisle';
    } else {
        order.fulfillment_type = 'Standard Fulfillment';
    }

    // Payment transactions
    var paymentTransactions = [];
    if (order.transactions && order.transactions.length > 0) {
        order.transactions.forEach(function(transaction) {
            if ((transaction.kind === 'SALE' || transaction.kind === 'CAPTURE') && transaction.status === 'SUCCESS') {
                paymentTransactions.push({
                    createdAt: transaction.createdAt,
                    id: transaction.id,
                    gateway: transaction.gateway,
                    kind: transaction.kind,
                    status: transaction.status,
                    paymentId: transaction.paymentId,
                    authorizationCode: transaction.authorizationCode,
                    parentTransaction: transaction.parentTransaction,
                    presentmentAmount: parseFloat(transaction.amountSet.presentmentMoney.amount).toFixed(3),
                    amount: parseFloat(transaction.amountSet.shopMoney.amount).toFixed(3)
                });
            }
        });
    }
    order.payment_transactions = paymentTransactions;

    // Variance check
    var calculatedTotal = totalLineAmount - totalDiscounts + totalTaxes;
    var shopifyTotal = parseFloat(order.totalPriceSet.shopMoney.amount);
    var variance = shopifyTotal - calculatedTotal;
    variance = Number(variance.toFixed(2));

    if (Math.abs(variance) > 0.01) {
        newLineItems.push({
            type: 'variance_item',
            sku: 'Shopify Variance',
            description: 'Shopify Variance Adjustment',
            amount: variance.toFixed(3)
        });
    }

    order.orderUrl = orderUrl;
    order.orderSourceLocation = orderSourceLocation;
    order.line_items_to_import = newLineItems;

    options.postResponseMapData[0].orderDetailsLookup = order;
    return options.postResponseMapData;
}
