/**
 * @NApiVersion 2.x
 * @NScriptType ScheduledScript
 */
define([
    'N/record',
    'N/search',
    'N/log'
], function(record, search, log) {

    function execute(context) {
        try {
            log.audit('RMA Receipt Script', 'Begin execution');

            // 1) Search for unprocessed RMA Receipt records
            var rmaReceiptSearch = search.create({
                type: 'customrecord_mg_rma_receipt',
                filters: [
                    ['custrecord_rmareceipt_scriptprocessstatu', 'anyof', '@NONE@'],
                    'AND',
                    ['custrecord_rmareceipt_rma', 'noneof', '@NONE@']
                ],
                columns: [ search.createColumn({ name: 'internalid' }) ]
            });

            var results = rmaReceiptSearch.run().getRange({ start: 0, end: 1000 });
            if (!results || results.length === 0) {
                log.audit('No Unprocessed RMA Receipts', 'Nothing to do');
                return;
            }

            log.audit('Found RMA Receipts', 'Count: ' + results.length);

            // 2) Process each record
            for (var i = 0; i < results.length; i++) {
                var recId = results[i].getValue({ name: 'internalid' });
                try {
                    processOneRMAReceipt(recId);
                } catch (perRecordErr) {
                    log.error('Error Processing RMA Receipt ' + recId, perRecordErr);
                    markAsError(recId, perRecordErr.toString());
                }
            }

            log.audit('RMA Receipt Script', 'End execution');
        } catch (masterErr) {
            log.error('Script-Level Error', masterErr);
        }
    }

    /**
     * Main function for processing one custom RMA Receipt record.
     */
    function processOneRMAReceipt(receiptId) {
        log.debug('processOneRMAReceipt', 'Starting receiptId=' + receiptId);

        // 1) Load the custom record
        var custRec = record.load({
            type: 'customrecord_mg_rma_receipt',
            id: receiptId,
            isDynamic: true
        });

        // Mark "In Progress" => '2'
        custRec.setValue({
            fieldId: 'custrecord_rmareceipt_scriptprocessstatu',
            value: '2'
        });
        custRec.save();

        // Gather fields
        var raId        = custRec.getValue({ fieldId: 'custrecord_rmareceipt_rma' });
        var rawJson     = custRec.getValue({ fieldId: 'custrecord_rmareceipt_raw_json' });
        var receiptDate = custRec.getValue({ fieldId: 'custrecord_rmareceipt_date_updated' });

        // 2) Parse JSON
        var dataObj;
        try {
            dataObj = JSON.parse(rawJson);
        } catch (e) {
            markAsError(receiptId, 'JSON parse error: ' + e);
            return;
        }

        var items = dataObj.items || [];
        if (!Array.isArray(items) || items.length === 0) {
            // No items => mark record complete
            record.submitFields({
                type: 'customrecord_mg_rma_receipt',
                id: receiptId,
                values: {
                    custrecord_rmareceipt_scriptprocessstatu: '3', // 3=Complete
                    custrecord_rmareceipt_scripterror: 'No items found in JSON. Nothing to process.'
                }
            });
            log.audit('No Items Found in JSON', 'receiptId=' + receiptId);
            return;
        }

        // 3) Summarize total good vs. defective by item
        var summaryByItem = {};  // { itemId: { totalGood: #, totalDef: # } }
        var itemIdToSku   = {};  // track SKU for logging

        items.forEach(function(lineObj){
            var sku         = lineObj.sku;
            var receivedQty = parseInt(lineObj.received, 10) || 0;
            var goodQty     = parseInt(lineObj.good, 10)     || 0;
            var defectiveQty= receivedQty - goodQty;

            if (!sku) return;

            var itemId = findItemBySKU(sku);
            if (!itemId) {
                markAsError(receiptId, 'Item not found for SKU=' + sku);
                return;
            }
            itemIdToSku[itemId] = sku;

            if (!summaryByItem[itemId]) {
                summaryByItem[itemId] = { totalGood: 0, totalDef: 0 };
            }
            summaryByItem[itemId].totalGood += goodQty;
            summaryByItem[itemId].totalDef  += defectiveQty;
        });

        // 4) Compare total new payload vs. already received
        var alreadyMap = gatherAlreadyReceived(raId);
        for (var itm in summaryByItem) {
            if (!summaryByItem.hasOwnProperty(itm)) continue;
            var newTotal = summaryByItem[itm].totalGood + summaryByItem[itm].totalDef;
            var prior    = alreadyMap[itm] || 0;
            if (newTotal < prior) {
                var skuStr = itemIdToSku[itm] || ('itemId=' + itm);
                markAsError(receiptId,
                    'New total for ' + skuStr + ' is ' + newTotal +
                    ' but RA has ' + prior + ' already. Error.'
                );
                return;
            }
        }

        // 5) Build two maps: one for good, one for defective
        var goodMap = {};
        var defMap  = {};
        for (var key in summaryByItem) {
            if (!summaryByItem.hasOwnProperty(key)) continue;
            var g = summaryByItem[key].totalGood;
            var d = summaryByItem[key].totalDef;
            if (g > 0) { goodMap[key] = g; }
            if (d > 0) { defMap[key]  = d; }
        }

        // 6) Create the "good" IR
        var errorParts = [];
        var goodKeys = Object.keys(goodMap);
        if (goodKeys.length > 0) {
            try {
                var resGood = createSingleIR({
                    raId:    raId,
                    dateVal: receiptDate,
                    lineQtyMap: goodMap,
                    itemIdToSku: itemIdToSku,
                    locationId: 10  // Example: "good" location ID
                });
                if (resGood.skippedArr.length > 0) {
                    errorParts.push('[GOOD IR Skips]\n' + resGood.skippedArr.join('\n'));
                }
            } catch (goodErr) {
                markAsError(receiptId, 'Error receiving GOOD: ' + goodErr);
                return;
            }
        }

        // 7) Create the "defective" IR
        var defKeys = Object.keys(defMap);
        if (defKeys.length > 0) {
            try {
                var resDef = createSingleIR({
                    raId:    raId,
                    dateVal: receiptDate,
                    lineQtyMap: defMap,
                    itemIdToSku: itemIdToSku,
                    locationId: 15  // Example: "defective" location
                });
                if (resDef.skippedArr.length > 0) {
                    errorParts.push('[DEFECT IR Skips]\n' + resDef.skippedArr.join('\n'));
                }
            } catch (defErr) {
                markAsError(receiptId, 'Error receiving DEFECTIVE: ' + defErr);
                return;
            }
        }

        // 8) Combine leftover messages, mark record complete
        var leftoverMsg = errorParts.join('\n\n');
        record.submitFields({
            type: 'customrecord_mg_rma_receipt',
            id: receiptId,
            values: {
                custrecord_rmareceipt_scriptprocessstatu: '3', // 3 = Completed
                custrecord_rmareceipt_scripterror: leftoverMsg
            }
        });
        log.audit('RMA Completed', 'receiptId=' + receiptId);
    }

    // ----------------------------------------------------------------------
    // createSingleIR
    // => Transforms the RA to IR in dynamic mode,
    //    sets itemreceive=false for lines we do NOT want to receive,
    //    sets itemreceive=true + quantity for lines we do want to receive.
    // ----------------------------------------------------------------------
    function createSingleIR(params) {
        var raId        = params.raId;
        var dateVal     = params.dateVal;
        var lineQtyMap  = params.lineQtyMap;   // itemId -> how many units to receive
        var itemIdToSku = params.itemIdToSku || {};
        var locId       = params.locationId;

        // 1) Transform
        var irRec = record.transform({
            fromType: record.Type.RETURN_AUTHORIZATION,
            fromId:   raId,
            toType:   record.Type.ITEM_RECEIPT,
            isDynamic: true
        });

        if (dateVal) {
            irRec.setValue({ fieldId: 'trandate', value: dateVal });
        }

        // 2) For each line in the IR's item sublist (static),
        //    determine if we want to receive or not.
        //    leftoverArr tracks leftover quantities we can't allocate.
        var leftoverArr = [];
        var lineCount = irRec.getLineCount({ sublistId: 'item' });

        for (var i = 0; i < lineCount; i++) {
            irRec.selectLine({ sublistId: 'item', line: i });

            var thisItem = irRec.getCurrentSublistValue({
                sublistId: 'item',
                fieldId: 'item'
            });
            // How many do we want for this item?
            var leftoverQty = lineQtyMap[thisItem] || 0;
            if (leftoverQty <= 0) {
                // Nothing to receive => set itemreceive = false
                irRec.setCurrentSublistValue({
                    sublistId: 'item',
                    fieldId: 'itemreceive',
                    value: false
                });
                irRec.commitLine({ sublistId: 'item' });
                continue;
            }

            // NetSuite transform typically sets sublist "quantity" = authorized - previously received
            var maxAvail = irRec.getCurrentSublistValue({
                sublistId: 'item',
                fieldId: 'quantity'
            }) || 0;

            // We'll receive up to leftoverQty or maxAvail
            var toReceiveNow = Math.min(leftoverQty, maxAvail);
            if (toReceiveNow > 0) {
                // => itemreceive = true, quantity = toReceiveNow
                irRec.setCurrentSublistValue({
                    sublistId: 'item',
                    fieldId: 'itemreceive',
                    value: true
                });
                irRec.setCurrentSublistValue({
                    sublistId: 'item',
                    fieldId: 'quantity',
                    value: toReceiveNow
                });
              irRec.setCurrentSublistValue({
                    sublistId: 'item',
                    fieldId: 'restock',
                    value: true
                });
                // If overriding location for all lines
                if (locId) {
                    irRec.setCurrentSublistValue({
                        sublistId: 'item',
                        fieldId: 'location',
                        value: locId
                    });
                }
                irRec.commitLine({ sublistId: 'item' });

                // Decrement leftover
                lineQtyMap[thisItem] -= toReceiveNow;
            } else {
                // toReceiveNow = 0 => we can't do anything
                irRec.setCurrentSublistValue({
                    sublistId: 'item',
                    fieldId: 'itemreceive',
                    value: false
                });
                irRec.commitLine({ sublistId: 'item' });
            }
        }

        // 3) If anything remains in lineQtyMap, we skip it => leftover
        for (var leftoverItemId in lineQtyMap) {
            if (!lineQtyMap.hasOwnProperty(leftoverItemId)) continue;
            var remain = lineQtyMap[leftoverItemId];
            if (remain > 0) {
                var skuStr = itemIdToSku[leftoverItemId] || 'itemId=' + leftoverItemId;
                leftoverArr.push('SKU=' + skuStr + ', leftoverQty=' + remain);
            }
        }

        // 4) Save if we have lines with itemreceive=true
        var finalCount = irRec.getLineCount({ sublistId: 'item' });
        var linesReceived = 0;
        for (var j = 0; j < finalCount; j++) {
            irRec.selectLine({ sublistId: 'item', line: j });
            var isRec = irRec.getCurrentSublistValue({
                sublistId: 'item',
                fieldId: 'itemreceive'
            });
            if (isRec === true) {
                linesReceived++;
            }
        }

        var savedId = null;
        if (linesReceived > 0) {
            savedId = irRec.save();
            log.audit('createSingleIR', 
                'IR created, ID=' + savedId + ', linesReceived=' + linesReceived);
        } else {
            log.debug('createSingleIR', 'No lines set to receive => no IR saved');
        }

        return {
            irId: savedId,
            skippedArr: leftoverArr
        };
    }

    /**
     * gatherAlreadyReceived
     * => returns { itemId: quantityreceived so far on the RA }
     */
    function gatherAlreadyReceived(raId) {
        var out = {};
        var raRec = record.load({
            type: record.Type.RETURN_AUTHORIZATION,
            id:   raId,
            isDynamic: false
        });
        var lineCount = raRec.getLineCount({ sublistId: 'item' });
        for (var i = 0; i < lineCount; i++) {
            var itm = raRec.getSublistValue({ sublistId: 'item', fieldId: 'item', line: i });
            var recd = parseFloat(
                raRec.getSublistValue({ sublistId: 'item', fieldId: 'quantityreceived', line: i })
            ) || 0;
            if (!out[itm]) out[itm] = 0;
            out[itm] += recd;
        }
        return out;
    }

    /**
     * findItemBySKU
     */
    function findItemBySKU(sku) {
        if (!sku) return null;
        var srch = search.create({
            type: search.Type.ITEM,
            filters: [
                ['custitem_mg_sku','is', sku],
                'AND',
                ['matrix','is','F']
            ],
            columns: ['internalid']
        });
        var rs = srch.run().getRange({ start: 0, end: 1 });
        if (rs && rs.length > 0) {
            return rs[0].getValue({ name: 'internalid' });
        }
        return null;
    }

    /**
     * markAsError
     */
    function markAsError(receiptId, msg) {
        var shortMsg = (msg.length > 300) ? msg.substring(0, 300) : msg;
        record.submitFields({
            type: 'customrecord_mg_rma_receipt',
            id: receiptId,
            values: {
                custrecord_rmareceipt_scriptprocessstatu: '4', // 4=Error
                custrecord_rmareceipt_scripterror: shortMsg
            }
        });
        log.error('RMA Receipt Error ' + receiptId, msg);
    }

    return {
        execute: execute
    };
});
